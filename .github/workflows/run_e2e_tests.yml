name: Run Postman Tests with Newman

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Namespace to test (dev, stage, prod)'
        required: false
        default: 'dev'
  workflow_call:
    inputs:
      namespace:
        required: false
        default: 'dev'
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      RESOURCE_GROUP:
        required: true

jobs:
  postman-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set Azure credentials
        uses: azure/login@v1
        with:
          creds: >-
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Upgrade Azure CLI
        run: |
          az upgrade --yes
          echo "‚úÖ Azure CLI upgraded successfully"

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ secrets.RESOURCE_GROUP }}" \
            --name microservices-cluster-prod \
            --overwrite-existing

      - name: Get API Gateway IP
        id: get_ip
        run: |
          NAMESPACE="${{ inputs.namespace }}"
          
          # Wait for IP to be assigned
          for i in {1..30}; do
            IP=$(kubectl get svc api-gateway -n "$NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$IP" && "$IP" != "null" ]]; then
              echo "API_GATEWAY_IP=$IP" >> $GITHUB_OUTPUT
              echo "‚úÖ Got API Gateway IP: $IP for namespace $NAMESPACE"
              exit 0
            fi
            echo "‚è≥ Waiting for IP... (attempt $i/30)"
            sleep 5
          done
          
          echo "‚ùå Failed to get API Gateway IP"
          exit 1

      - name: Update Postman collection with dynamic IP
        run: |
          API_IP="${{ steps.get_ip.outputs.API_GATEWAY_IP }}"
          API_URL="http://$API_IP:8080/app/api"
          
          echo "üìù Updating Postman collection with URL: $API_URL"
          
          # Update the url variable in the collection
          sed -i "s|\"value\": \"http://.*/app/api\"|\"value\": \"$API_URL\"|" api_gateway.postman_collection.json
          
          echo "‚úÖ Updated Postman collection"

      - name: Update K6 test with dynamic IP
        run: |
          API_IP="${{ steps.get_ip.outputs.API_GATEWAY_IP }}"
          API_URL="http://$API_IP:8080/actuator/health"
          
          echo "üìù Updating K6 test with URL: $API_URL"
          
          # Update the URL in the K6 test
          sed -i "s|http://.*:8080/actuator/health|$API_URL|" tests/performance/load-test.js
          
          echo "‚úÖ Updated K6 test"

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install k6
        run: |
          curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt update
          sudo apt install -y k6

      - name: Run performance test
        run: k6 run ./tests/performance/load-test.js

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://${{ steps.get_ip.outputs.API_GATEWAY_IP }}:8080'
          fail_action: false

      - name: Install Newman
        run: npm install -g newman

      - name: Run Newman collection with dynamic URL
        run: |
          newman run api_gateway.postman_collection.json

